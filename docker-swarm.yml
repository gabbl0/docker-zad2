version: '3'
services:
  postgres:
    image: 'postgres:latest'
    environment:
      - POSTGRES_PASSWORD=postgres_password
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: 'redis:latest'
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  nginx:
    depends_on:
      - api
      - client
    image: 'gabbla1/zad2:nginx'
    ports:
      - '3050:80'
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  api:
    image: 'gabbla1/zad2:server'
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  client:
    stdin_open: true
    image: 'gabbla1/zad2:client'
    volumes:
      - /app/node_modules
      - ./client:/app
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  worker:
    image: 'gabbla1/zad2:worker'
    volumes:
      - /app/node_modules
      - ./worker:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_OPTIONS=--openssl-legacy-provider
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
